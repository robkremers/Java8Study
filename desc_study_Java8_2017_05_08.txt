Topic	: Study of Java8.
Date	: 2017-05-08.

- Documentation:
	- Java 8 In Action.
	- https://github.com/java8/Java8InAction
	- http://docs.oracle.com/javase/tutorial/java/index.html
		- https://docs.oracle.com/javase/tutorial/collections/index.html
			- Aggregate operations: streams.
	- https://www.tutorialspoint.com/java8/index.htm
	- http://www.baeldung.com/java-8-streams
	
---------------------------------------------------------------------------------------------------
2018-03-31:

LTAdmin@LTAdmin-PC MINGW64 /e/JavaDevelopment/Java8InActionWorkspace
$

git init
git pull https://github.com/robkremers/Java8Study.git
git status
git add .
git commit -m "Initial commit."
git remote add origin https://github.com/robkremers/Java8Study.git
git push -u origin master



- Java 8 In Action:
	- Java 8: Support for multi-core parallel processing.
	- A Stream is a sequence of data items that are conceptually produced one at a time.
		Java 8 can transparently run your pipeline of Stream operations on several CPU cores on disjoint parts of the input.
		The data source supports aggregate operations.
		The output stream of one operation could well be the input stream f another.
	- Behaviour Parameterization:
		- Definition:
			The ability to tell a method to take multiple behaviours (or strategies) as parameters and use them internally to accomplish different behaviours.
			This allows to create more adaptive code with regards to changing requirements and make the code more concise.
		- In detail:
			Suppose you want to write two methods that differ in only a few lines of code.
			You can now just pass the code of the parts that differ as an argument.
		- Example:
			- In the following the strategy (predicate) has been separated from the logic of iterating the collection (inside the filter).
			- Predicates examples:
			
				public boolean isHeavyApple(Apple apple) {
					return (apple.getWeight() > this.getBoundary() );
				}
				
				public class AppleWeightPredicate implements Predicate<Apple> {
					
					@Override
					public boolean test(Apple apple) {
						return apple.getWeight() > 150;
					}
				}		
		
			- Processing of the predicates:
			
				public static List<Apple> filterApplesStream(List<Apple> inventory, Predicate<Apple> predicate ) {
					List<Apple> result = new ArrayList<>();
					
					result = inventory.stream().filter(predicate).collect( toList() );	
					return result;
				}
				
			- Setting the predicate in the call of the filter, using a lambda:
			
				List<Apple> redHeavyApples2 = filterApplesStream( inventory
																, (Apple apple) -> (apple.getWeight() > 150 && apple.getColor().equals("red") ) 
																);

	
	- Parallelism and shared mutable data.
		- The code for the behaviour that is passed to the stream should be safe to execute concurrently on different pieces of the input.
		  Typically this means writing code that does not access shared mutable data.
	- Predicate:
		- A method that takes a value for an argument and returns a boolean.
		- java.util.function.Predicate<T>
			T - the type of the input to the predicate
			Represents a predicate (boolean-valued function) of one argument.
			This is a functional interface whose functional method is test(Object).
			Functional interfaces provide target types for lambda expressions and method references.
		- java.util.function.Function<T, R>
			T - the type of the input to the function
			R - the type of the result of the function
	- Lambda expression:
		- Definition:
			A Lambda Expression ( or just a lambda for brevity) is a representation of an anonymous function which can be passed around as a parameter thus achieving behaviour parameterization. 
			A lambda consists of a list of parameters, a body, a return type and a list of exceptions which can be thrown. I.e. it is very much a function, just anonymous.
		- A concise representation of an anonymous class that can be passed around.
			- Anonymous
			- Function:
				- a Lambda expression is not associated with a particular class
				- like a method a Lambda expression has:
					- a list of parameters
					- a body
					- a return type 
					- and possibly a list of exceptions.
			- Can be passed as an argument to a method or stored in a variable.
			- Concise: the main advantage is, that it saves (potentially) a lot of code writing.
		- Basic syntax:
			(parameters) -> expression
			or
			(parameters) -> {statements; }
			- If a lambda has a statement expression as it's body, it's compatible with a function descriptor that returns void
				(provided the parameter list is compatible too).
				
		- A Lambda expression is handled via a functional interface.
	- Default Methods:
		- Added to Java 8 to support library designers by enabling them to write more evolvable interfaces.
		  Using it solves the problem of having to update all classes that already have implemented the interface.
		- Examples:
			Interface java.util.Collection<E>:
				default Stream<E> stream().
			- Now for Collections the Stream functionality (java.util.stream) can be used.
			- But since the methods has been defined as 'default' existing libraries / custom code does not need to implement this.

java.lang public @interface @FunctionalInterface.
@FunctionalInterface
An informative annotation type used to indicate that an interface type declaration is intended to be a functional interface as defined by the Java Language Specification. 

		- Lambda expressions can be used in the context of a functional interface.
			- A functional interface is an interface that specifies exactly one abstract method.
				- A functional interface can have default methods (so non-abstract).
				- Example:
					public interface Predicate<T>() {
						boolean test(T t);
					}
				- Example:
					package com.java8study.chapter03.interfaces;

					@FunctionalInterface
					public interface MyStringInterface {
						
						public String testMethod(String string);

					}
					
					- Use:
						MyStringInterface myStringInterface = ( String string ) -> string + " Tested.";  
						
						String stringOutput = myStringInterface.testMethod("test");
						System.out.println(stringOutput);
						
					- Result:
						> test Tested.

					
		- An anonymous class can achieve the same result though usually is more verbose.
		- The signature of the abstract method of a functional interface is called a functional descriptor.
		  This signature essentially describes the signature of the lambda expression.
		- A lambda can be:
			- assigned to a variable (of the correct functional Interface type) or
			- passed to a method expecting a functional interface as argument, providing the lambda expression has the same signature as the 
			  abstract method of the functional interface.

http://www.java2s.com/Tutorials/Java/java.util.function/Consumer/index.htm
http://www.concretepage.com/java/jdk-8/java-8-runnable-and-callable-lambda-example-with-argument		
http://www.javabrahman.com/java-8/functional-interfaces-java-8/

		- Type Inference.
			The Java Compiler can deduce what functional interface to associate with a lambda expression from its surrounding context (the target type).
		- Since lambdas are actually anonymous classes they can use instance variables and static variables without restrictions.
			Local variables do have to be declared final or are effectively final.
			If the value of the local variable is changed later this will cause a compile error. Prevent this by declaring it 'final'.
			An instance or static variable can be changed afterwards.
			Reason for this:
			- Instance variables are stored on the heap, whereas local variables live on the stack.
			  If a lambda could access the local variable directly and the lambda were used in a thread, the thread using the lambda could try to access the variable after the thread that allocated the variable had de-allocated it.
			  Hence, Java implements access to a free local variable as access to a copy of it rather than access to the original variable.
			  
	- Closure and lambdas:
		- Definition:
			An instance of a function that can reference non-local variables of that function without restrictions.
			e.g. a closure can be passed as argument to another function. It could also access and modify variables defined outside its scope.
			Lamdas can do something similar.
			However they CAN NOT modify the content of local variables of a method in which the lambda is defined.
			Those local variables have to be implicitly final
			Again: this restriction exists because the local variables live on the stack and are confined to the thread they are in.
			
	- Method Reference:
		- Definition:
			Shorthand for a Lambda calling only a specific method.
		- Declaration:
			<target reference> :: <name of the method to be used>
			No brackets are necessary because the method is not actually called.
		- Example:
			(String s) -> System.out.println(s); == System.out::println;
		- Three main kinds of method references.
			- A method reference to a static method
				- Definition: (args) -> ClassName.staticMethod(args); == ClassName::staticMethod
				- Example   : (Integer i) -> i.parsInt(); == Integer::parseInt
			- A method reference to an instance method of an arbitrary type.
				- Definition: (arg0, rest) -> arg0.instanceMethod(rest) == arg0::instanceMethod;
				- Example   : (String s) -> s.lenghth() == String::length
			- A method reference to an instance method of an existing object.
				- Definition: (args) -> expr.instanceMethod(args) == expr::instanceMethod;
				- Example: 
					ExpensiveTransaction expensiveTransaction = new ExpensiveTransaction();
					....
					expensiveTransaction::getValue;

	- Constructor Reference:
		
		
---------------------------------------------------------------------------------------------------
2018-03-30:

Chapter 2: Passing Code with Behaviour Parameterization.
Continue tomorrow at pg. 30.

---------------------------------------------------------------------------------------------------
2018-04-01:

Chapter 3: Lambdas in a nutshell.

Study:
- Package java.util.stream
- java.util.stream.Collectors.toList;

- Example of a self defined Functional interface:

		package com.java8study.chapter03.interfaces;

		@FunctionalInterface
		public interface PredicateInstanceProperty<T, P> {
			
			public boolean accept (T t, P p);

		}

		Use:
		
			PredicateInstanceProperty<Apple, Integer> appleWeight = (Apple apple, Integer value) -> (apple.getWeight() > value );
			
			boolean heavy = appleWeight.accept( new Apple(180, "green"), 200);
			System.out.println("Is the apple heavy? " + heavy);
			
Standard functional interfaces:

- java.util.function:
	public interface Predicate<T> {
		boolean test(T t);
	}
	
- And the other functional interfaces in this package.

- java.util.Comparator:
	public interface Comparator<T> {
		int compare( T t1, T t2);
	}
	
- java.util.Runnable
	public interface Runnable {
		void run();
	}
	
- java.util.concurrent.Callable
	public interface Callable<V> {
		V call();
	}
	
- java.security.PrivilegedAction
	public interface PriviledgedAction<T> {
		T run();
	}
	
- Commonly used Functional Interfaces in Java 8.

Functional Interface	Function Descriptor	Description

Predicate<T>			T -> boolean		Represents a predicate (boolean-valued function) of one argument.
Consumer<T>				T -> void			Represents an operation that accepts a single input argument and returns no result.
Function<T,R>			T -> R				Represents a function that accepts one argument and produces a result.
Supplier<T>				() -> T				Represents a supplier of results.
UnaryOperator<T>		T -> T				Represents an operation on a single operand that produces a result of the same type as it's operand.
BinaryOperator<T>		(T, T) -> T			Represents an operation upon two operands of the same type, producing a result of the same type as the operands.
BiPredicate<L, R>		(L, R) -> boolean	Represents a predicate (boolean-valued function) of two arguments. This is the two-arity specialization of Predicate.
BiConsumer<T, U>		(T, U) -> void		Represents an operation that accepts two input arguments and returns no result. 
											This is the two-arity specialization of Consumer.
BiFunction<T, U, R>		(T, U) -> R			Represents a function that accepts two arguments and produces a result. 
											This is the two-arity specialization of Function.

In each case also primitive specializations exist.
This means boxing will be prevented, which would come at a performance cost.

Examples of lambdas with functional interfaces:

Use Case					Example of Lambda							Matching functional interface
Boolean expression			( List<String> list) -> list.isEmpty();		Predicate< List<String> >

Creating objects			() -> new Apple(50, "green")				Supplier<Apple>

Consuming from an object	(Apple a) ->								Consumer<Apple>
								System.out.println( a.getWeight() );
								
Select / extract from an 	(String s) -> s.length();					Function<String, Integer> or
object																	ToIntFunction<String>

Combine two values			(int a, int b) -> a + b;					IntBinaryOperator			

Compare two objects			(Apple apple1, Apple apple2) ->				Comparator(Apple) or
							 apple1.getWeight().compareTo(				ToIntBiFunction(Apple, Apple ).
							 apple2.getWeight())


- Exceptions, lambdas and functional interfaces:
	- None of the predefined functional interfaces (java.util.function) allow for a checked exception to be thrown.
	- Options:
		a. define a custom interface that declares the checked exception or
		b. wrap the lambda with a try/catch block.
		
	Example of situation a:
		package com.java8study.chapter03.interfaces;

		import java.io.IOException;

		@FunctionalInterface
		public interface FileReaderProcessor<T, R> {
			
			public R process(T t) throws IOException;
		}

	Example of situation b:

		Function <BufferedReader, String> f = 
			(BufferedReader br) -> {
				try {
					return br.readLine();
				} catch( IOException ioe ) {
					throw new RuntimeException( ioe);
				}
			};


- Deconstruction of the type-checking process of a lambda-expression by the jvm.
	- Example:
		- filter(inventory, (Apple a) -> a.getWeight() > 150 );
		1. What is the context in which the lambda is used? -> type checking.
		- Filter definition:
			- filter( List<Apple> inventory, Predicate<Apple> p);
		2. So the target type is Predicate<Apple>.
		3. What is the abstract method in the Predicate<Apple> functional interface?
			- boolean test(Apple apple);
		4. So: the method test() describes a function descriptor that accepts an Apple and returns a boolean: Apple -> boolean.
		5. The function descriptor Apple -> boolean matches the signature of the lambda.
			So the code type checks.
			
	- Because of the idea of target typing, the same lambda expression can be associated with different functional interfaces
	  if they have a compatible abstract method signature.
			
- Type inference:
	- The Java Compiler deduces what functional interface to associate with a lambda expression from it's surrounding context (the target type).
	  Meaning it can also deduce an appropriate signature for the lambda, because the function descriptor is available through the target type.
	- This means that the parameter types of a lambda expression can be omitted.
	- Sometimes it is more readable to include the type explicitly and sometimes it is more readable to omit them.
	- Example:
		Function<Apple, Boolean> testAppleWeight = (Apple apple) -> (apple.getWeight() > 150);
		
		can also be written as:
		
		Function<Apple, Boolean> testAppleWeight = (apple) -> (apple.getWeight() > 150);
		
- Using local variables:
	- Lambdas are allowed to capture (i.e. to reference) instance variables and static variables without restrictions.
	- Local variables however have to be explicitly declared final or are effectively final.
	- Reason: 
		Instance variables live on the heap, whereas local variables live on the stack.
		If a lambda could access the local variable directly and the lambda were used in a thread, the thread using the lambda could try to access the local 
		variable after the thread that allocated the local variable had de-allocated it.
		Hence, Java implements access to a free local variable as access to a copy of it rather than access to the original variable.
		This makes no difference if the local variable is assigned to only once.
	
- Method reference.
	- 
	- http://javarevisited.blogspot.nl/2017/08/how-to-convert-lambda-expression-to-method-reference-in-java8-example.html
		If you modify the argument before passing it to another method then you cannot replace lambdas with method reference e.g. in the following case we cannot do that:

		listOfNumbers.stream().sorted().forEach(number -> {
		  System.out.println(String.valueOf(number));
		  }
		);
		
- Useful methods to compose lambda expressions.
	- It is possible to use lambda expressions inside another lambda expression in order to build a larger expression.
	- When using a method inside a lambda expression other methods can be called and / or chained.
		- Example:
			inventory.sort( comparing( Apple::getWeight ).reversed().thenComparing( Apple::getColor ) );
			- See the use of:
				- reversed()
				- thenComparing() for comparing, using a different property.
		- Example:
			Function<Integer, Integer> f = (x) -> ++x;
			Function<Integer, Integer> g = (x) -> x * 2;
			Function<Integer, Integer> h = f.andThen(g);
			System.out.println("Result after executing h(1): f.andThen(g); first f, then g: " + h.apply(1));
			
			Function<Integer, Integer> h2 = f.compose(g);
			System.out.println("Result after executing h2(1): f.compose(g); first g, then f: " + h2.apply(1));

---------------------------------------------------------------------------------------------------
Chapter 4 Introducing Streams.

- java.util.stream:
	- Streams allow manipulation of collections in a declarative way; like an sql query.
		- Declarative: it is described what should be done, not how it is to be done.
	- Streams can be processed in parallel transparently, without having to explicitly write multi-threaded code.

To perform a computation, stream operations are composed into a stream pipeline. 
- A stream pipeline consists of:
	- a data source:
		- might be an array, a collection, a generator function, an I/O channel, etc.
		- Generating a stream from a source preserves the ordering.
	- zero or more INTERMEDIATE operations which transform a stream into another stream, 
		- such as:														Function descriptor
			- Stream<T>		filter(Predicate<? super T> predicate)		T -> boolean
			- <R> Stream<R>	map(Function<? super T,? extends R> mapper)	T -> R
			- Stream<T>		distinct()									
			- Stream<T>		limit(long maxSize)
			- Stream<T>		sorted(Comparator<? super T> comparator)	(T, T) -> int
			- etc.
	- and a TERMINAL operation which produces a result or side-effect, but in any case a non-stream value (including possibly void) 
		- such as:
			- long		count()
							Returns the number of elements in a stream.
			- void		forEach(Consumer<? super T> action)
							Consumes each element of a stream and applies a lambda to each of them.
			- <R,A> R	collect(Collector<? super T,A,R> collector)
							Reduces the stream to create a collection such as a List, a Map or even an Integer.
		- No result is produced, and indeed no element is even selected, UNTIL the terminal operation is invoked.
		
		- Example:
			List<String> names = menu.stream()
									 .filter( d -> d.getCalories() > 300 )
									 .map( Dish::getName )
									 .limit( 3 )
									 .collect( toList() );
									 
		- Example:
			public static List<String> getLowCaloricDishesNamesInJava8(List<Dish> dishes, int caloricValue) {
				
				List<String> lowCaloricDishNames = new ArrayList<>();
				lowCaloricDishNames = dishes.parallelStream()
										   .filter( ( Dish dish ) -> dish.getCalories() < caloricValue )
										   .sorted( comparing( Dish::getCalories ))
										   .map( Dish::getName )
										   .collect( toList() );
				
				return lowCaloricDishNames;

			}
						 
- Streams are lazy; computation on the source data is only performed when the terminal operation is initiated, and source elements are consumed only as needed.	
	- Intermediate operations are lazy:
		This is because intermediate operations can usually be merged and processed into a single pass by the terminal operation.
- Characteristics of a stream:
	- Pipelining:
		Many stream operations return a stream themselves, allowing operations to be chained and form a larger pipeline.
		This enables optimization, such as laziness and short-circuiting.
		A pipeline can be viewed as a database-like query on the data source.
	- Internal iteration:
		In contrast to collections, which are iterated explicitly, stream operations do the iteration behind the scene for you.
		A stream uses internal iteration, it does the iteration for you and takes care of storing the resulting stream somewhere.
		The developer merely provides a function saying what's to be done.
- A stream can be traversed only once. After that the stream is said to be consumed.
	If it is tried to traverse the stream again an IllegalStateException will be thrown.


	